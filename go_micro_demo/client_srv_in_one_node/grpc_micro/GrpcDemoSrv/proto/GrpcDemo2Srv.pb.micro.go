// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/GrpcDemo2Srv.proto

package GrpcDemoSrv

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GrpcDemo2Srv service

func NewGrpcDemo2SrvEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GrpcDemo2Srv service

type GrpcDemo2SrvService interface {
	Grpc2Call(ctx context.Context, in *Demo2Req, opts ...client.CallOption) (*Demo2Resp, error)
}

type grpcDemo2SrvService struct {
	c    client.Client
	name string
}

func NewGrpcDemo2SrvService(name string, c client.Client) GrpcDemo2SrvService {
	return &grpcDemo2SrvService{
		c:    c,
		name: name,
	}
}

func (c *grpcDemo2SrvService) Grpc2Call(ctx context.Context, in *Demo2Req, opts ...client.CallOption) (*Demo2Resp, error) {
	req := c.c.NewRequest(c.name, "GrpcDemo2Srv.Grpc2Call", in)
	out := new(Demo2Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GrpcDemo2Srv service

type GrpcDemo2SrvHandler interface {
	Grpc2Call(context.Context, *Demo2Req, *Demo2Resp) error
}

func RegisterGrpcDemo2SrvHandler(s server.Server, hdlr GrpcDemo2SrvHandler, opts ...server.HandlerOption) error {
	type grpcDemo2Srv interface {
		Grpc2Call(ctx context.Context, in *Demo2Req, out *Demo2Resp) error
	}
	type GrpcDemo2Srv struct {
		grpcDemo2Srv
	}
	h := &grpcDemo2SrvHandler{hdlr}
	return s.Handle(s.NewHandler(&GrpcDemo2Srv{h}, opts...))
}

type grpcDemo2SrvHandler struct {
	GrpcDemo2SrvHandler
}

func (h *grpcDemo2SrvHandler) Grpc2Call(ctx context.Context, in *Demo2Req, out *Demo2Resp) error {
	return h.GrpcDemo2SrvHandler.Grpc2Call(ctx, in, out)
}
