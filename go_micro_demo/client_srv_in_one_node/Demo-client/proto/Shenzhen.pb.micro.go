// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/Shenzhen.proto

package Helloworld

import (
	fmt "fmt"
	math "math"

	proto "google.golang.org/protobuf/proto"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Shenzhen service

func NewShenzhenEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Shenzhen service

type ShenzhenService interface {
	Call(ctx context.Context, in *SZReq, opts ...client.CallOption) (*SZRsp, error)
}

type shenzhenService struct {
	c    client.Client
	name string
}

func NewShenzhenService(name string, c client.Client) ShenzhenService {
	return &shenzhenService{
		c:    c,
		name: name,
	}
}

func (c *shenzhenService) Call(ctx context.Context, in *SZReq, opts ...client.CallOption) (*SZRsp, error) {
	req := c.c.NewRequest(c.name, "Shenzhen.Call", in)
	out := new(SZRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Shenzhen service

type ShenzhenHandler interface {
	Call(context.Context, *SZReq, *SZRsp) error
}

func RegisterShenzhenHandler(s server.Server, hdlr ShenzhenHandler, opts ...server.HandlerOption) error {
	type shenzhen interface {
		Call(ctx context.Context, in *SZReq, out *SZRsp) error
	}
	type Shenzhen struct {
		shenzhen
	}
	h := &shenzhenHandler{hdlr}
	return s.Handle(s.NewHandler(&Shenzhen{h}, opts...))
}

type shenzhenHandler struct {
	ShenzhenHandler
}

func (h *shenzhenHandler) Call(ctx context.Context, in *SZReq, out *SZRsp) error {
	return h.ShenzhenHandler.Call(ctx, in, out)
}
