// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/backend.proto

package backend

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Backend service

func NewBackendEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Backend service

type BackendService interface {
	RetName(ctx context.Context, in *BkReq, opts ...client.CallOption) (*BkResp, error)
}

type backendService struct {
	c    client.Client
	name string
}

func NewBackendService(name string, c client.Client) BackendService {
	return &backendService{
		c:    c,
		name: name,
	}
}

func (c *backendService) RetName(ctx context.Context, in *BkReq, opts ...client.CallOption) (*BkResp, error) {
	req := c.c.NewRequest(c.name, "Backend.RetName", in)
	out := new(BkResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Backend service

type BackendHandler interface {
	RetName(context.Context, *BkReq, *BkResp) error
}

func RegisterBackendHandler(s server.Server, hdlr BackendHandler, opts ...server.HandlerOption) error {
	type backend interface {
		RetName(ctx context.Context, in *BkReq, out *BkResp) error
	}
	type Backend struct {
		backend
	}
	h := &backendHandler{hdlr}
	return s.Handle(s.NewHandler(&Backend{h}, opts...))
}

type backendHandler struct {
	BackendHandler
}

func (h *backendHandler) RetName(ctx context.Context, in *BkReq, out *BkResp) error {
	return h.BackendHandler.RetName(ctx, in, out)
}
