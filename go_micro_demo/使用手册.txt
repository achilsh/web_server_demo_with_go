为了创建服务端和客户端，需要安装一些基本工具和依赖，比如：
1. go install github.com/golang/protobuf/{proto,protoc-gen-go}  安装 Protobuf
2. go install google.golang.org/protobuf/cmd/protoc-gen-go@latest 安装 protoc-gen-go
3. go install github.com/go-micro/generator/cmd/protoc-gen-micro@latest 安装 protoc-gen-micro
4. go install github.com/go-micro/cli/cmd/go-micro@latest 安装go-micro，用于命令行生成服务端和client 模板

一般使用上面安装的工具对proto文件生成源码，比如下面的文件对应的源码及工具：
运行命令老生源源码： protoc --proto_path=. --micro_out=. --go_out=. greeter.proto
    greeter.proto	    # original protobuf file
    greeter.pb.go	    # auto-generated by protoc-gen-go
    greeter.micro.go	# auto-generated by protoc-gen-micro
上面信息来源： https://github.com/go-micro/generator


4. go-micro 也有一些脚手架工具可以直接生成服务和client的源码
    这就是go-micro的客户端, 运行命令就可安装客户端：
    go install github.com/go-micro/cli/cmd/go-micro@latest
    然后就可以运行 go-micro 的命令 创建服务端和 client的模板，包括grpc等，
    如何使用参考： https://github.com/go-micro/cli

    4.1 比如使用 go-micro 手动生成服务端实例：
    go-micro new service server_name  默认生成的http 服务。
    go-micro new service --grpc  server_name  生成 grpc 服务。

    4.2 也可以在已经生成的模版中增加自己自定义rpc服务，比如新增一些proto 文件，修改原有的proto 文件。
    然后通过 类似命令： protoc --proto_path=. --micro_out=. --go_out=:. proto/Shenzhen.proto 去重新生成rpc 接口。

    4.3 通过proto文件中新增rpc接口上，还可以定义出 proto 文件中的rpc具体的实现。

1. 使用go-micro 命令行来创建服务端和client模板